import React from "react";
import "./Dashboards.css";
import logo from "../assets/Logo_light_background.png"; 

/**
 * Donor Dashboard — fulfills acceptance criteria:
 * - Donor-specific UI (list/manage surplus food)
 * - Redirect/guard handled by your router (role check)
 * - Uses shared palette + reusable CSS
 *
 * Hook the fetchers to your backend when ready.
 */

// ---------- Minimal fetch helpers (adjust endpoints) ----------
const hdrs = () => {
  const t = localStorage.getItem("token");
  return t ? { Authorization: `Bearer ${t}`, "Content-Type": "application/json" } : { "Content-Type": "application/json" };
};

async function fetchDonorStats() {
  // expected shape: { total:0, active:0, claimed:0, expiringSoon:0 }
  const r = await fetch("/donor/stats", { headers: hdrs() });
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}
async function fetchListings({ q = "", page = 1 } = {}) {
  // expected shape: { items:[{id,title,qty,unit,expiresAt,status,createdAt}], total }
  const r = await fetch(`/donor/listings?q=${encodeURIComponent(q)}&page=${page}`, { headers: hdrs() });
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}
async function createListing(payload) {
  const r = await fetch("/donor/listings", { method: "POST", headers: hdrs(), body: JSON.stringify(payload) });
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}
async function updateListingStatus(id, status) {
  const r = await fetch(`/donor/listings/${id}/status`, { method: "PATCH", headers: hdrs(), body: JSON.stringify({ status }) });
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}

// ---------- UI ----------
function Modal({ open, title, children, onClose }) {
  if (!open) return null;
  return (
    <div className="ff-modal-backdrop">
      <div className="ff-modal">
        <h3>{title}</h3>
        {children}
        <div style={{ textAlign: "right", marginTop: 10 }}>
          <button className="ff-btn ghost" onClick={onClose}>Close</button>
        </div>
      </div>
    </div>
  );
}

export default function DonorDashboard() {
  const [stats, setStats] = React.useState({ total: 0, active: 0, claimed: 0, expiringSoon: 0 });
  const [items, setItems] = React.useState([]);
  const [total, setTotal] = React.useState(0);
  const [q, setQ] = React.useState("");
  const [page, setPage] = React.useState(1);
  const [loading, setLoading] = React.useState(true);

  const [openNew, setOpenNew] = React.useState(false);
  const [form, setForm] = React.useState({
    title: "", category: "Prepared Meals", qty: 1, unit: "kg",
    pickupWindow: "", location: "", expiresAt: ""
  });

  const load = React.useCallback(async () => {
    setLoading(true);
    try {
      const [s, l] = await Promise.all([fetchDonorStats(), fetchListings({ q, page })]);
      setStats(s || {});
      setItems(l.items || []);
      setTotal(l.total || 0);
    } finally {
      setLoading(false);
    }
  }, [q, page]);

  React.useEffect(() => { load(); }, [load]);

  function onChange(field, value) {
    setForm(prev => ({ ...prev, [field]: value }));
  }

  async function saveNew() {
    const payload = {
      title: form.title.trim(),
      category: form.category,
      quantity: Number(form.qty),
      unit: form.unit,
      pickupWindow: form.pickupWindow,
      location: form.location,
      expiresAt: form.expiresAt
    };
    await createListing(payload);
    setOpenNew(false);
    setForm({ title: "", category: "Prepared Meals", qty: 1, unit: "kg", pickupWindow: "", location: "", expiresAt: "" });
    await load();
  }

  async function markClaimed(id) {
    await updateListingStatus(id, "claimed");
    await load();
  }
  async function closeListing(id) {
    await updateListingStatus(id, "closed");
    await load();
  }

  return (
    <div className="ff-wrap">
      {/* Header */}
      <div className="ff-top">
        <img className="ff-logo" src={logo} alt="FoodFlow" />
        <h1>Donor Dashboard</h1>
        <div className="spacer" />
        <a className="ff-btn ghost" href="/">Home</a>
        <button className="ff-btn" onClick={() => setOpenNew(true)}>+ New Listing</button>
      </div>

      {/* KPIs */}
      <div className="ff-kpi-grid">
        {[
          { label: "Total Listed", num: stats.total },
          { label: "Active Listings", num: stats.active },
          { label: "Claimed", num: stats.claimed },
          { label: "Expiring Soon", num: stats.expiringSoon }
        ].map((k, i) => (
          <div key={i} className="ff-card">
            <div className="ff-kpi" style={{ display: "flex", gap: 12, alignItems: "center" }}>
              <div className="num">{k.num ?? 0}</div>
              <div className="label">{k.label}</div>
            </div>
          </div>
        ))}
      </div>

      {/* Search */}
      <div className="ff-card ff-searchbar">
        <input className="ff-input" placeholder="Search my listings…" value={q} onChange={e => { setQ(e.target.value); setPage(1); }} />
        <button className="ff-btn" onClick={load}>Search</button>
        <div className="spacer" />
        <div className="ff-help">{loading ? "Loading…" : `${items.length} / ${total}`}</div>
      </div>

      {/* Listings table */}
      <div className="ff-card" style={{ marginTop: 14 }}>
        <table className="ff-table">
          <thead>
            <tr>
              <th>Title</th>
              <th>Qty</th>
              <th>Expires</th>
              <th>Status</th>
              <th style={{ textAlign: "right" }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {items.map(x => (
              <tr key={x.id} className="ff-row">
                <td>{x.title}</td>
                <td>{x.qty} {x.unit}</td>
                <td>{x.expiresAt ? new Date(x.expiresAt).toLocaleString() : "-"}</td>
                <td>
                  <span className={`ff-status ${
                    x.status === "active" ? "st-active" :
                    x.status === "claimed" ? "st-claimed" : "st-closed"
                  }`}>{x.status}</span>
                </td>
                <td style={{ textAlign: "right" }}>
                  <button className="ff-btn secondary" style={{ marginRight: 8 }} onClick={() => markClaimed(x.id)} disabled={x.status !== "active"}>
                    Mark Claimed
                  </button>
                  <button className="ff-btn ghost" onClick={() => closeListing(x.id)} disabled={x.status !== "active"}>
                    Close
                  </button>
                </td>
              </tr>
            ))}
            {items.length === 0 && !loading && (
              <tr><td colSpan={5} style={{ padding: 12, color: "#547f95" }}>No listings yet. Click “New Listing”.</td></tr>
            )}
          </tbody>
        </table>

        {/* Simple pagination */}
        <div style={{ display: "flex", justifyContent: "space-between", marginTop: 10 }}>
          <div className="ff-help">Page {page}</div>
          <div style={{ display: "flex", gap: 8 }}>
            <button className="ff-btn ghost" onClick={() => setPage(p => Math.max(1, p - 1))} disabled={page <= 1}>Prev</button>
            <button className="ff-btn" onClick={() => setPage(p => p + (items.length === 0 ? 0 : 1))} disabled={items.length === 0}>Next</button>
          </div>
        </div>
      </div>

      {/* New Listing modal */}
      <Modal open={openNew} title="Create New Listing" onClose={() => setOpenNew(false)}>
        <div className="ff-form">
          <div className="row">
            <input className="ff-input" placeholder="Title (e.g., 20 boxed meals)" value={form.title} onChange={e => onChange("title", e.target.value)} />
            <select className="ff-input" value={form.category} onChange={e => onChange("category", e.target.value)}>
              <option>Prepared Meals</option>
              <option>Produce</option>
              <option>Bakery</option>
              <option>Dairy</option>
              <option>Packaged Goods</option>
              <option>Beverages</option>
            </select>
          </div>
          <div className="row">
            <input type="number" min="1" className="ff-input" placeholder="Qty" value={form.qty} onChange={e => onChange("qty", e.target.value)} />
            <input className="ff-input" placeholder="Unit (kg, trays, boxes…)" value={form.unit} onChange={e => onChange("unit", e.target.value)} />
          </div>
          <div className="row">
            <input type="datetime-local" className="ff-input" value={form.expiresAt} onChange={e => onChange("expiresAt", e.target.value)} />
            <input className="ff-input" placeholder="Pickup window (e.g., 5–8 PM)" value={form.pickupWindow} onChange={e => onChange("pickupWindow", e.target.value)} />
          </div>
          <input className="ff-input" placeholder="Pickup location (address or notes)" value={form.location} onChange={e => onChange("location", e.target.value)} />
          <div style={{ textAlign: "right", marginTop: 6 }}>
            <button className="ff-btn secondary" onClick={saveNew}>Save Listing</button>
          </div>
          <div className="ff-help">Listings become visible to receivers once created. You can mark as “Claimed” or “Close” anytime.</div>
        </div>
      </Modal>
    </div>
  );
}
